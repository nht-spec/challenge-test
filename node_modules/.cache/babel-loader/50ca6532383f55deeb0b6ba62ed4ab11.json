{"ast":null,"code":"var _jsxFileName = \"/Users/thinhnguyen/challenge/movie-project/src/components/shared/ListViewTest.jsx\",\n    _s = $RefreshSig$();\n\nimport { Row } from 'antd';\nimport React, { useEffect, useRef } from 'react';\nimport { API_KEY } from '../../constants/api-keys';\nimport LazyLoadImg from '../LazyLoad/LazyLoadImg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListViewTest(_ref) {\n  _s();\n\n  let {\n    current\n  } = _ref;\n  const imgRef = useRef();\n\n  const test = () => {\n    const img = imgRef.current;\n    const observer = new IntersectionObserver(entries => {\n      console.log(entries[0].isIntersecting); // if (entries[0].isIntersecting) {\n      // img.setAttribute('src', url);\n      // img.classList.add('active');\n      // }\n    });\n  };\n\n  test();\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: current === null || current === void 0 ? void 0 : current.map(movie => /*#__PURE__*/_jsxDEV(LazyLoadImg, {\n      url: API_KEY.IMAGE_URL + movie.poster_path\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 3\n  }, this);\n}\n\n_s(ListViewTest, \"4ePvNHuSuoDcJUA4FzxhhVtSEHM=\");\n\n_c = ListViewTest;\nexport default ListViewTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListViewTest\");","map":{"version":3,"names":["Row","React","useEffect","useRef","API_KEY","LazyLoadImg","ListViewTest","current","imgRef","test","img","observer","IntersectionObserver","entries","console","log","isIntersecting","map","movie","IMAGE_URL","poster_path"],"sources":["/Users/thinhnguyen/challenge/movie-project/src/components/shared/ListViewTest.jsx"],"sourcesContent":["import { Row } from 'antd';\nimport React, { useEffect, useRef } from 'react';\nimport { API_KEY } from '../../constants/api-keys';\nimport LazyLoadImg from '../LazyLoad/LazyLoadImg';\n\nfunction ListViewTest({ current }) {\n\tconst imgRef = useRef();\n\n\tconst test = () => {\n\t\tconst img = imgRef.current;\n\n\t\tconst observer = new IntersectionObserver((entries) => {\n\t\t\tconsole.log(entries[0].isIntersecting);\n\t\t\t// if (entries[0].isIntersecting) {\n\t\t\t// img.setAttribute('src', url);\n\t\t\t// img.classList.add('active');\n\t\t\t// }\n\t\t});\n\t};\n\n\ttest();\n\n\treturn (\n\t\t<Row>\n\t\t\t{current?.map((movie) => (\n\t\t\t\t<LazyLoadImg url={API_KEY.IMAGE_URL + movie.poster_path} />\n\t\t\t))}\n\t\t</Row>\n\t);\n}\n\nexport default ListViewTest;\n"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,MAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;;;AAEA,SAASC,YAAT,OAAmC;EAAA;;EAAA,IAAb;IAAEC;EAAF,CAAa;EAClC,MAAMC,MAAM,GAAGL,MAAM,EAArB;;EAEA,MAAMM,IAAI,GAAG,MAAM;IAClB,MAAMC,GAAG,GAAGF,MAAM,CAACD,OAAnB;IAEA,MAAMI,QAAQ,GAAG,IAAIC,oBAAJ,CAA0BC,OAAD,IAAa;MACtDC,OAAO,CAACC,GAAR,CAAYF,OAAO,CAAC,CAAD,CAAP,CAAWG,cAAvB,EADsD,CAEtD;MACA;MACA;MACA;IACA,CANgB,CAAjB;EAOA,CAVD;;EAYAP,IAAI;EAEJ,oBACC,QAAC,GAAD;IAAA,UACEF,OADF,aACEA,OADF,uBACEA,OAAO,CAAEU,GAAT,CAAcC,KAAD,iBACb,QAAC,WAAD;MAAa,GAAG,EAAEd,OAAO,CAACe,SAAR,GAAoBD,KAAK,CAACE;IAA5C;MAAA;MAAA;MAAA;IAAA,QADA;EADF;IAAA;IAAA;IAAA;EAAA,QADD;AAOA;;GAxBQd,Y;;KAAAA,Y;AA0BT,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}