{"ast":null,"code":"var _jsxFileName = \"/Users/thinhnguyen/challenge/movie-project/src/components/shared/ListViewTest.jsx\",\n    _s = $RefreshSig$();\n\nimport { Row } from 'antd';\nimport React, { useEffect, useRef } from 'react';\nimport { API_KEY } from '../../constants/api-keys';\nimport LazyLoadImg from '../LazyLoad/LazyLoadImg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListViewTest(_ref) {\n  _s();\n\n  let {\n    imagepath\n  } = _ref;\n  const imgRef = useRef();\n  const img = imgRef.current;\n  const image = API_KEY.IMAGE_URL + imagepath.poster_path;\n  const observer = new IntersectionObserver(entries => {\n    console.log(entries[0].isIntersecting); // if (entries[0].isIntersecting) {\n\n    img.setAttribute('src', image); // img.classList.add('active');\n    // }\n  }); // test();\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      ref: imgRef,\n      alt: image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }, this);\n}\n\n_s(ListViewTest, \"4ePvNHuSuoDcJUA4FzxhhVtSEHM=\");\n\n_c = ListViewTest;\nexport default ListViewTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListViewTest\");","map":{"version":3,"names":["Row","React","useEffect","useRef","API_KEY","LazyLoadImg","ListViewTest","imagepath","imgRef","img","current","image","IMAGE_URL","poster_path","observer","IntersectionObserver","entries","console","log","isIntersecting","setAttribute"],"sources":["/Users/thinhnguyen/challenge/movie-project/src/components/shared/ListViewTest.jsx"],"sourcesContent":["import { Row } from 'antd';\nimport React, { useEffect, useRef } from 'react';\nimport { API_KEY } from '../../constants/api-keys';\nimport LazyLoadImg from '../LazyLoad/LazyLoadImg';\n\nfunction ListViewTest({ imagepath }) {\n\tconst imgRef = useRef();\n\tconst img = imgRef.current;\n\tconst image = API_KEY.IMAGE_URL + imagepath.poster_path;\n\n\tconst observer = new IntersectionObserver((entries) => {\n\t\tconsole.log(entries[0].isIntersecting);\n\t\t// if (entries[0].isIntersecting) {\n\t\timg.setAttribute('src', image);\n\t\t// img.classList.add('active');\n\t\t// }\n\t});\n\n\t// test();\n\n\treturn (\n\t\t<Row>\n\t\t\t<img ref={imgRef} alt={image} />\n\t\t\t{/* {current?.map((movie) => (\n\t\t\t\t// <LazyLoadImg url={API_KEY.IMAGE_URL + movie.poster_path} />\n\t\t\t))} */}\n\t\t</Row>\n\t);\n}\n\nexport default ListViewTest;\n"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,MAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;;;AAEA,SAASC,YAAT,OAAqC;EAAA;;EAAA,IAAf;IAAEC;EAAF,CAAe;EACpC,MAAMC,MAAM,GAAGL,MAAM,EAArB;EACA,MAAMM,GAAG,GAAGD,MAAM,CAACE,OAAnB;EACA,MAAMC,KAAK,GAAGP,OAAO,CAACQ,SAAR,GAAoBL,SAAS,CAACM,WAA5C;EAEA,MAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAA0BC,OAAD,IAAa;IACtDC,OAAO,CAACC,GAAR,CAAYF,OAAO,CAAC,CAAD,CAAP,CAAWG,cAAvB,EADsD,CAEtD;;IACAV,GAAG,CAACW,YAAJ,CAAiB,KAAjB,EAAwBT,KAAxB,EAHsD,CAItD;IACA;EACA,CANgB,CAAjB,CALoC,CAapC;;EAEA,oBACC,QAAC,GAAD;IAAA,uBACC;MAAK,GAAG,EAAEH,MAAV;MAAkB,GAAG,EAAEG;IAAvB;MAAA;MAAA;MAAA;IAAA;EADD;IAAA;IAAA;IAAA;EAAA,QADD;AAQA;;GAvBQL,Y;;KAAAA,Y;AAyBT,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}