{"ast":null,"code":"var _jsxFileName = \"/Users/thinhnguyen/challenge/movie-project/src/components/shared/ListViewTest.jsx\",\n    _s = $RefreshSig$();\n\nimport { Row } from 'antd';\nimport React, { useEffect, useRef } from 'react';\nimport { API_KEY } from '../../constants/api-keys';\nimport LazyLoadImg from '../LazyLoad/LazyLoadImg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListViewTest(_ref) {\n  _s();\n\n  let {\n    current\n  } = _ref;\n  const imgRef = useRef();\n  const img = imgRef.current;\n  const observer = new IntersectionObserver(entries => {\n    console.log(entries[0].isIntersecting); // if (entries[0].isIntersecting) {\n\n    img.setAttribute('src', `${API_KEY.IMAGE_URL + current.poster_path}`); // img.classList.add('active');\n    // }\n  });\n\n  const test = () => {}; // test();\n\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      ref: imgRef,\n      alt: `${API_KEY.IMAGE_URL + current.poster_path}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }, this);\n}\n\n_s(ListViewTest, \"4ePvNHuSuoDcJUA4FzxhhVtSEHM=\");\n\n_c = ListViewTest;\nexport default ListViewTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListViewTest\");","map":{"version":3,"names":["Row","React","useEffect","useRef","API_KEY","LazyLoadImg","ListViewTest","current","imgRef","img","observer","IntersectionObserver","entries","console","log","isIntersecting","setAttribute","IMAGE_URL","poster_path","test"],"sources":["/Users/thinhnguyen/challenge/movie-project/src/components/shared/ListViewTest.jsx"],"sourcesContent":["import { Row } from 'antd';\nimport React, { useEffect, useRef } from 'react';\nimport { API_KEY } from '../../constants/api-keys';\nimport LazyLoadImg from '../LazyLoad/LazyLoadImg';\n\nfunction ListViewTest({ current }) {\n\tconst imgRef = useRef();\n\tconst img = imgRef.current;\n\n\tconst observer = new IntersectionObserver((entries) => {\n\t\tconsole.log(entries[0].isIntersecting);\n\t\t// if (entries[0].isIntersecting) {\n\t\timg.setAttribute('src', `${API_KEY.IMAGE_URL + current.poster_path}`);\n\t\t// img.classList.add('active');\n\t\t// }\n\t});\n\n\tconst test = () => {};\n\n\t// test();\n\n\treturn (\n\t\t<Row>\n\t\t\t<img ref={imgRef} alt={`${API_KEY.IMAGE_URL + current.poster_path}`} />\n\t\t\t{/* {current?.map((movie) => (\n\t\t\t\t<LazyLoadImg url={API_KEY.IMAGE_URL + movie.poster_path} />\n\t\t\t))} */}\n\t\t</Row>\n\t);\n}\n\nexport default ListViewTest;\n"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,MAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;;;AAEA,SAASC,YAAT,OAAmC;EAAA;;EAAA,IAAb;IAAEC;EAAF,CAAa;EAClC,MAAMC,MAAM,GAAGL,MAAM,EAArB;EACA,MAAMM,GAAG,GAAGD,MAAM,CAACD,OAAnB;EAEA,MAAMG,QAAQ,GAAG,IAAIC,oBAAJ,CAA0BC,OAAD,IAAa;IACtDC,OAAO,CAACC,GAAR,CAAYF,OAAO,CAAC,CAAD,CAAP,CAAWG,cAAvB,EADsD,CAEtD;;IACAN,GAAG,CAACO,YAAJ,CAAiB,KAAjB,EAAyB,GAAEZ,OAAO,CAACa,SAAR,GAAoBV,OAAO,CAACW,WAAY,EAAnE,EAHsD,CAItD;IACA;EACA,CANgB,CAAjB;;EAQA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB,CAZkC,CAclC;;;EAEA,oBACC,QAAC,GAAD;IAAA,uBACC;MAAK,GAAG,EAAEX,MAAV;MAAkB,GAAG,EAAG,GAAEJ,OAAO,CAACa,SAAR,GAAoBV,OAAO,CAACW,WAAY;IAAlE;MAAA;MAAA;MAAA;IAAA;EADD;IAAA;IAAA;IAAA;EAAA,QADD;AAQA;;GAxBQZ,Y;;KAAAA,Y;AA0BT,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}